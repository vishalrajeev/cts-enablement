#### Global Settings
global:
  clusterName: appd-cloud-demo

#### AppD Cloud Configs
appdynamics-cloud-k8s-monitoring:
  install:
    clustermon: true
    defaultInfraCollectors: true
    logCollector: true
 
  #### ClusterMon Configs
  clustermonConfig:
    logLevel: debug
    events:
      enabled: true
      severityToExclude: []
      reasonToExclude: []
      severeGroupByReason: []
  # ClusterMon Deployment Specific Configs
  # clustermonPod:
  #   image: appdynamics/appdynamics-cloud-k8s-monitoring:22.9.0-1340
  #   imagePullPolicy: IfNotPresent
    
  #### InfraMon Configs
  # InfraManager Configs
  infraManagerConfig:
    logLevel: info
  # ServerMon Configs
  servermonConfig:
    logLevel: info
  # ContainerMon Configs
  containermonConfig:
    logLevel: info
  # InfraMon Daemonset Specific Configs
  # inframonPod:
  #   image: appdynamics/appdynamics-cloud-k8s-monitoring:22.8.0-1305    
  #   imagePullPolicy: IfNotPresent

  #### LCA Config
  logCollectorConfig:
    container:
      logging:
        level: debug
      conditionalConfigs:
        - condition:
            operator: regexp
            key: kubernetes.container.name
            value: "^logging-json.*"
          config:
            multiLinePattern: '^{'
            multiLineNegate: true
            multiLineMatch: after
            messageParser:
              json:
                enabled: true
                timestampField: "@timestamp"
                timestampPattern: "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"
        - condition:
            operator: regexp
            key: kubernetes.container.name
            value: "^logging-log4j.*"
          config:
            multiLinePattern: '^[0-9]{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) [0-9]{4} [0-9]{2}:[0-9]{2}:[0-9]{2},[0-9]{3}'
            multiLineNegate: true
            multiLineMatch: after
            messageParser:
              log4J:
                enabled: true
                pattern: "%d{DATE} %-5level [%t] %logger{36} : %C.%M:[%L] - %m%n"
        - condition:
            operator: regexp
            key: kubernetes.container.name
            value: "^logging-logback.*"
          config:
            multiLinePattern: '^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}.[0-9]{3}'
            multiLineNegate: true
            multiLineMatch: after
            messageParser:
              logback:
                enabled: true
                pattern: "%d{yyyy-MM-dd HH:mm:ss.SSS} %5level [%thread] %logger{36} : %msg%n"
        - condition:
            operator: regexp
            key: kubernetes.container.name
            value: "^logging-grok.*"
          config:
            multiLinePattern: '^{'
            multiLineNegate: true
            multiLineMatch: after
            messageParser:
              grok:
                enabled: true
                patterns:
                  - '%{DATESTAMP:time} %{LOGLEVEL:severity} %{WORD:class}:%{NUMBER:line} - %{GREEDYDATA:data}'
                  - '%{DATESTAMP_RFC2822:time} %{LOGLEVEL:severity} %{GREEDYDATA:data}'
                  - '%{TOMCAT_DATESTAMP:time} \| %{LOGLEVEL:level} \| %{JAVACLASS:class} - %{JAVALOGMESSAGE:logmessage}'
                  - '%{IP:clientIP} %{WORD:httpMethod} %{URIPATH:url}'
                timestampField: time
                timestampPattern: '^2021|^55|^Tue'
        - condition:
            operator: regexp
            key: kubernetes.container.name
            value: "^logging-timestamp.*"
          config:
            multiLinePattern: 'pattern'
            multiLineNegate: true
            multiLineMatch: after
            messageParser:
              timestamp:
                enabled: true
                format: ISO8601_BASIC
        - condition:
            operator: equals
            key: kubernetes.container.name
            value: "kube-proxy"
          config:
            multiLinePattern: '^I|^W|^E|^F'
            multiLineNegate: true
            multiLineMatch: after
            messageParser:
              infra:
                enabled: true
        - condition:
            operator: regexp
            key: kubernetes.container.name
            value: "^springboot-logging-logback.*"
          config:
            multiLinePattern: '^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}.[0-9]{3}'
            multiLineNegate: true
            multiLineMatch: after
            messageParser:
              logback:
                enabled: true
                pattern: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%-5level] [%thread] [%logger{36}] [%mdc{trace_id}] [%mdc{span_id}] [%mdc{trace_flags}] : %msg%n"
  # LCA Daemonset Specific Configs
  # logCollectorPod:
  #   image: appdynamics/appdynamics-cloud-log-collector-agent:22.8.0-304      
  #   imagePullPolicy: IfNotPresent
    
#### Otel Collector Configs
appdynamics-otel-collector:
  enablePrometheus: true
  spec:
    replicas: 2
  clientId: agt_72amf1ahiT3nY0sqGi0sPk
  clientSecret: i5EWZ5OY_Xno4ozPDbcl8WvGzNXr7nPH1wX8vAlAIGg
  endpoint: https://lab1.observe.appdynamics.com/data
  tokenUrl: https://lab1.observe.appdynamics.com/auth/dfdbdf71-7322-44d0-85fb-36c69a7c3789/default/oauth2/token
  configOverride:
    exporters:
      logging:
        loglevel: debug
    service:
      extensions: [health_check, oauth2client, zpages]
      pipelines:
        logs:
          receivers: [otlp]
          processors: [batch, memory_limiter]
          exporters: [otlphttp, logging]
        metrics:
          receivers: [otlp]
          processors: [batch, memory_limiter]
          exporters: [otlphttp]
        traces:
          receivers: [otlp]
          processors: [batch, memory_limiter]
          exporters: [logging, otlphttp]
      telemetry:
        logs:
          level: "debug"
# Otel Collector Daemonset Specific Configs
# otelCollectorPod:
#   image:  appdynamics/appdynamics-cloud-otel-collector:22.8.0-391
#   imagePullPolicy: Always
#   env:
#     - name: "HTTPS_PROXY"
#       value: "http://<proxy_host>:<proxy_port>"